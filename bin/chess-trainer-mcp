#!/usr/bin/env node

import { ChessTrainerServer } from '../server/index.js';
import { fileURLToPath } from 'url';
import path from 'path';
import { execSync } from 'child_process';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

// Parse command line arguments
const args = process.argv.slice(2);
const command = args[0] || 'start';

// Global shutdown flag to prevent multiple shutdown handlers
let isShuttingDown = false;
let server = null;

// Graceful shutdown function
function gracefulShutdown(signal) {
  if (isShuttingDown) {
    return;
  }
  isShuttingDown = true;
  
  console.log(`\n👋 Shutting down Chess Trainer MCP Server... (${signal})`);
  
  if (server && typeof server.shutdown === 'function') {
    server.shutdown();
    
    // Give server time to close gracefully, then force exit
    setTimeout(() => {
      console.log('✅ Server shutdown complete');
      process.exit(0);
    }, 2000);
    
    // Force exit after timeout
    setTimeout(() => {
      console.log('⏰ Force closing server after timeout');
      process.exit(1);
    }, 5000);
  } else {
    process.exit(0);
  }
}

// Print banner
function printBanner() {
  console.log(`
╔═══════════════════════════════════════╗
║        Chess Trainer MCP Server       ║
║              Version 1.0.0            ║
║         🏆 AI Chess Training          ║
╚═══════════════════════════════════════╝
`);
}

// Show help
function showHelp() {
  printBanner();
  console.log(`
Usage: npx chess-trainer-mcp [command] [options]

Commands:
  start         Start the Chess Trainer MCP Server (default)
  setup         Install dependencies and build the project
  dev           Start in development mode with hot reload
  build         Build the frontend for production
  help          Show this help message

Options:
  --port <port>     Server port (default: 3456)
  --mcp-host <url>  MCP host URL for coaching integration
  --no-mcp          Disable MCP integration
  --log-level <level>  Log level: debug, info, warn, error

Examples:
  npx chess-trainer-mcp                    # Start server on port 3456
  npx chess-trainer-mcp --port 8080       # Start on custom port
  npx chess-trainer-mcp setup             # Install and build
  npx chess-trainer-mcp dev               # Development mode

Environment Variables:
  PORT                Server port
  MCP_HOST_URL        MCP host endpoint
  MCP_ENABLED         Enable/disable MCP (true/false)
  LOG_LEVEL           Logging level

For more information, visit: https://github.com/modenl/stockfishmcp
`);
}

// Parse options
function parseOptions() {
  const config = {
    port: process.env.PORT || 3456,
    mcpHostUrl: process.env.MCP_HOST_URL || 'http://localhost:3000/mcp/inbound',
    mcpEnabled: process.env.MCP_ENABLED !== 'false',
    logLevel: process.env.LOG_LEVEL || 'info'
  };

  for (let i = 1; i < args.length; i++) {
    switch (args[i]) {
      case '--port':
        config.port = parseInt(args[++i]) || config.port;
        break;
      case '--mcp-host':
        config.mcpHostUrl = args[++i] || config.mcpHostUrl;
        break;
      case '--no-mcp':
        config.mcpEnabled = false;
        break;
      case '--log-level':
        config.logLevel = args[++i] || config.logLevel;
        break;
    }
  }

  return config;
}

// Check if dependencies are installed
function checkDependencies() {
  const nodeModulesExists = fs.existsSync(path.join(rootDir, 'node_modules'));
  const clientNodeModulesExists = fs.existsSync(path.join(rootDir, 'client', 'node_modules'));
  const clientDistExists = fs.existsSync(path.join(rootDir, 'client', 'dist'));
  
  return {
    server: nodeModulesExists,
    client: clientNodeModulesExists,
    built: clientDistExists
  };
}

// Setup project
async function setupProject() {
  printBanner();
  console.log('🔧 Setting up Chess Trainer MCP Server...\n');
  
  try {
    console.log('📦 Installing server dependencies...');
    execSync('npm install', { cwd: rootDir, stdio: 'inherit' });
    
    console.log('\n📦 Installing client dependencies...');
    execSync('npm run client:install', { cwd: rootDir, stdio: 'inherit' });
    
    console.log('\n🏗️  Building frontend...');
    execSync('npm run client:build', { cwd: rootDir, stdio: 'inherit' });
    
    console.log('\n✅ Setup complete! You can now run:');
    console.log('   npx chess-trainer-mcp start');
    console.log('   or');
    console.log('   npx chess-trainer-mcp dev');
  } catch (error) {
    console.error('\n❌ Setup failed:', error.message);
    process.exit(1);
  }
}

// Start development mode
async function startDev() {
  printBanner();
  console.log('🚀 Starting development mode...\n');
  
  const deps = checkDependencies();
  if (!deps.server || !deps.client) {
    console.log('⚠️  Dependencies not found. Running setup first...\n');
    await setupProject();
  }
  
  try {
    execSync('npm run dev', { cwd: rootDir, stdio: 'inherit' });
  } catch (error) {
    console.error('❌ Failed to start development mode:', error.message);
    process.exit(1);
  }
}

// Build project
async function buildProject() {
  printBanner();
  console.log('🏗️  Building Chess Trainer MCP Server...\n');
  
  const deps = checkDependencies();
  if (!deps.server || !deps.client) {
    console.log('⚠️  Dependencies not found. Running setup first...\n');
    await setupProject();
    return;
  }
  
  try {
    execSync('npm run client:build', { cwd: rootDir, stdio: 'inherit' });
    console.log('\n✅ Build complete!');
  } catch (error) {
    console.error('❌ Build failed:', error.message);
    process.exit(1);
  }
}

// Start server
async function startServer(config) {
  printBanner();
  
  // Check dependencies
  const deps = checkDependencies();
  if (!deps.server) {
    console.log('⚠️  Server dependencies not found. Please run:');
    console.log('   npx chess-trainer-mcp setup\n');
    process.exit(1);
  }
  
  if (!deps.client) {
    console.log('⚠️  Client dependencies not found. Installing...\n');
    try {
      execSync('npm run client:install', { cwd: rootDir, stdio: 'inherit' });
    } catch (error) {
      console.error('❌ Failed to install client dependencies:', error.message);
      process.exit(1);
    }
  }
  
  if (!deps.built) {
    console.log('⚠️  Frontend not built. Building...\n');
    try {
      execSync('npm run client:build', { cwd: rootDir, stdio: 'inherit' });
    } catch (error) {
      console.error('❌ Failed to build frontend:', error.message);
      process.exit(1);
    }
  }
  
  console.log('Configuration:');
  console.log(`  🌐 Port: ${config.port}`);
  console.log(`  🤖 MCP Host: ${config.mcpHostUrl}`);
  console.log(`  ⚡ MCP Enabled: ${config.mcpEnabled ? '✅' : '❌'}`);
  console.log(`  📝 Log Level: ${config.logLevel}`);
  console.log('');
  console.log(`🎯 Starting Chess Trainer MCP Server...`);
  console.log(`📱 Open your browser to: http://localhost:${config.port}`);
  console.log('');

  // Handle process termination - setup handlers before starting server
  process.on('SIGINT', () => gracefulShutdown('SIGINT'));
  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

  // Handle uncaught exceptions
  process.on('uncaughtException', (error) => {
    console.error('💥 Uncaught Exception:', error);
    gracefulShutdown('uncaughtException');
  });

  process.on('unhandledRejection', (reason, promise) => {
    console.error('💥 Unhandled Rejection at:', promise, 'reason:', reason);
    gracefulShutdown('unhandledRejection');
  });

  // Start the server
  try {
    server = new ChessTrainerServer();
    server.start(config.port);
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Main execution
async function main() {
  const config = parseOptions();
  
  switch (command) {
    case 'help':
    case '--help':
    case '-h':
      showHelp();
      break;
    case 'setup':
      await setupProject();
      break;
    case 'dev':
      await startDev();
      break;
    case 'build':
      await buildProject();
      break;
    case 'start':
    default:
      await startServer(config);
      break;
  }
}

// Run main function
main().catch(error => {
  console.error('💥 Fatal error:', error);
  process.exit(1);
}); 